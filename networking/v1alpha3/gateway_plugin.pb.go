// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: networking/v1alpha3/gateway_plugin.proto

package v1alpha3

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GatewayPlugin struct {
	// route level plugin
	Route []string `protobuf:"bytes,1,rep,name=route,proto3" json:"route,omitempty"`
	// host level plugin
	Host []string `protobuf:"bytes,2,rep,name=host,proto3" json:"host,omitempty"`
	// service level plugin
	Service []string   `protobuf:"bytes,3,rep,name=service,proto3" json:"service,omitempty"`
	Plugins []*Plugins `protobuf:"bytes,4,rep,name=plugins,proto3" json:"plugins,omitempty"`
	// which gateway should use this plugin setting
	Gateway []string `protobuf:"bytes,5,rep,name=gateway,proto3" json:"gateway,omitempty"`
	// which user should use this plugin setting
	User []string `protobuf:"bytes,6,rep,name=user,proto3" json:"user,omitempty"`
	// group setting 用于路由组级别的配置设置，其优先级低于路由级别的配置
	IsGroupSetting       bool     `protobuf:"varint,7,opt,name=isGroupSetting,proto3" json:"isGroupSetting,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayPlugin) Reset()         { *m = GatewayPlugin{} }
func (m *GatewayPlugin) String() string { return proto.CompactTextString(m) }
func (*GatewayPlugin) ProtoMessage()    {}
func (*GatewayPlugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde08958efb731f8, []int{0}
}
func (m *GatewayPlugin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayPlugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayPlugin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayPlugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayPlugin.Merge(m, src)
}
func (m *GatewayPlugin) XXX_Size() int {
	return m.Size()
}
func (m *GatewayPlugin) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayPlugin.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayPlugin proto.InternalMessageInfo

func (m *GatewayPlugin) GetRoute() []string {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *GatewayPlugin) GetHost() []string {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *GatewayPlugin) GetService() []string {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *GatewayPlugin) GetPlugins() []*Plugins {
	if m != nil {
		return m.Plugins
	}
	return nil
}

func (m *GatewayPlugin) GetGateway() []string {
	if m != nil {
		return m.Gateway
	}
	return nil
}

func (m *GatewayPlugin) GetUser() []string {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GatewayPlugin) GetIsGroupSetting() bool {
	if m != nil {
		return m.IsGroupSetting
	}
	return false
}

type Plugins struct {
	// plugin name is the name of plugin, such as envoy.util, com.netease.transformation
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// plugin settings
	Settings             *types.Struct `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Plugins) Reset()         { *m = Plugins{} }
func (m *Plugins) String() string { return proto.CompactTextString(m) }
func (*Plugins) ProtoMessage()    {}
func (*Plugins) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde08958efb731f8, []int{1}
}
func (m *Plugins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plugins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plugins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plugins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plugins.Merge(m, src)
}
func (m *Plugins) XXX_Size() int {
	return m.Size()
}
func (m *Plugins) XXX_DiscardUnknown() {
	xxx_messageInfo_Plugins.DiscardUnknown(m)
}

var xxx_messageInfo_Plugins proto.InternalMessageInfo

func (m *Plugins) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Plugins) GetSettings() *types.Struct {
	if m != nil {
		return m.Settings
	}
	return nil
}

func init() {
	proto.RegisterType((*GatewayPlugin)(nil), "istio.networking.v1alpha3.GatewayPlugin")
	proto.RegisterType((*Plugins)(nil), "istio.networking.v1alpha3.plugins")
}

func init() {
	proto.RegisterFile("networking/v1alpha3/gateway_plugin.proto", fileDescriptor_fde08958efb731f8)
}

var fileDescriptor_fde08958efb731f8 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcd, 0x4a, 0xc4, 0x30,
	0x10, 0xc7, 0xc9, 0x7e, 0x75, 0xcd, 0xa2, 0x87, 0x20, 0x18, 0x45, 0x4a, 0xe9, 0x41, 0x7a, 0x4a,
	0x70, 0x7b, 0xf5, 0xe4, 0x65, 0xaf, 0xd2, 0xbd, 0x79, 0x91, 0xec, 0x12, 0xb3, 0xc1, 0xda, 0x94,
	0x7c, 0xec, 0xe2, 0x1b, 0x7a, 0xf4, 0x11, 0xa4, 0x17, 0x5f, 0x43, 0x92, 0xb4, 0x2b, 0x88, 0xde,
	0x66, 0x86, 0x5f, 0x7e, 0xfc, 0x67, 0x02, 0x8b, 0x86, 0xdb, 0x83, 0xd2, 0x2f, 0xb2, 0x11, 0x74,
	0x7f, 0xcb, 0xea, 0x76, 0xc7, 0x4a, 0x2a, 0x98, 0xe5, 0x07, 0xf6, 0xf6, 0xd4, 0xd6, 0x4e, 0xc8,
	0x86, 0xb4, 0x5a, 0x59, 0x85, 0x2e, 0xa5, 0xb1, 0x52, 0x91, 0x1f, 0x9e, 0x0c, 0xfc, 0xd5, 0xb5,
	0x50, 0x4a, 0xd4, 0x9c, 0x06, 0x70, 0xe3, 0x9e, 0xa9, 0xb1, 0xda, 0x6d, 0x6d, 0x7c, 0x98, 0x7f,
	0x01, 0x78, 0xba, 0x8a, 0xc6, 0x87, 0x20, 0x44, 0xe7, 0x70, 0xaa, 0x95, 0xb3, 0x1c, 0x83, 0x6c,
	0x5c, 0x9c, 0x54, 0xb1, 0x41, 0x08, 0x4e, 0x76, 0xca, 0x58, 0x3c, 0x0a, 0xc3, 0x50, 0x23, 0x0c,
	0x13, 0xc3, 0xf5, 0x5e, 0x6e, 0x39, 0x1e, 0x87, 0xf1, 0xd0, 0xa2, 0x3b, 0x98, 0xc4, 0x78, 0x06,
	0x4f, 0xb2, 0x71, 0xb1, 0x58, 0xe6, 0xe4, 0xdf, 0x80, 0xa4, 0x27, 0xab, 0xe1, 0x89, 0xf7, 0xf6,
	0x4b, 0xe2, 0x69, 0xf4, 0xf6, 0xad, 0x4f, 0xe1, 0x0c, 0xd7, 0x78, 0x16, 0x53, 0xf8, 0x1a, 0xdd,
	0xc0, 0x33, 0x69, 0x56, 0x5a, 0xb9, 0x76, 0xcd, 0xad, 0x95, 0x8d, 0xc0, 0x49, 0x06, 0x8a, 0x79,
	0xf5, 0x6b, 0x9a, 0x57, 0xc7, 0x4c, 0x5e, 0xd3, 0xb0, 0x57, 0xbf, 0x21, 0xf0, 0x1a, 0x5f, 0xa3,
	0x12, 0xce, 0x4d, 0x24, 0x0d, 0x1e, 0x65, 0xa0, 0x58, 0x2c, 0x2f, 0x48, 0xbc, 0x1c, 0x19, 0x2e,
	0x47, 0xd6, 0xe1, 0x72, 0xd5, 0x11, 0xbc, 0x27, 0xef, 0x5d, 0x0a, 0x3e, 0xba, 0x14, 0x7c, 0x76,
	0x29, 0x78, 0xcc, 0xe2, 0x8e, 0x52, 0x51, 0xd6, 0x4a, 0xfa, 0xc7, 0xdf, 0x6d, 0x66, 0x41, 0x55,
	0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x00, 0x65, 0x6a, 0xd9, 0x01, 0x00, 0x00,
}

func (m *GatewayPlugin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayPlugin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayPlugin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsGroupSetting {
		i--
		if m.IsGroupSetting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.User) > 0 {
		for iNdEx := len(m.User) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.User[iNdEx])
			copy(dAtA[i:], m.User[iNdEx])
			i = encodeVarintGatewayPlugin(dAtA, i, uint64(len(m.User[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Gateway) > 0 {
		for iNdEx := len(m.Gateway) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Gateway[iNdEx])
			copy(dAtA[i:], m.Gateway[iNdEx])
			i = encodeVarintGatewayPlugin(dAtA, i, uint64(len(m.Gateway[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Plugins) > 0 {
		for iNdEx := len(m.Plugins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Plugins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGatewayPlugin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Service) > 0 {
		for iNdEx := len(m.Service) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Service[iNdEx])
			copy(dAtA[i:], m.Service[iNdEx])
			i = encodeVarintGatewayPlugin(dAtA, i, uint64(len(m.Service[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Host) > 0 {
		for iNdEx := len(m.Host) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Host[iNdEx])
			copy(dAtA[i:], m.Host[iNdEx])
			i = encodeVarintGatewayPlugin(dAtA, i, uint64(len(m.Host[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Route) > 0 {
		for iNdEx := len(m.Route) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Route[iNdEx])
			copy(dAtA[i:], m.Route[iNdEx])
			i = encodeVarintGatewayPlugin(dAtA, i, uint64(len(m.Route[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Plugins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plugins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plugins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGatewayPlugin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGatewayPlugin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGatewayPlugin(dAtA []byte, offset int, v uint64) int {
	offset -= sovGatewayPlugin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GatewayPlugin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Route) > 0 {
		for _, s := range m.Route {
			l = len(s)
			n += 1 + l + sovGatewayPlugin(uint64(l))
		}
	}
	if len(m.Host) > 0 {
		for _, s := range m.Host {
			l = len(s)
			n += 1 + l + sovGatewayPlugin(uint64(l))
		}
	}
	if len(m.Service) > 0 {
		for _, s := range m.Service {
			l = len(s)
			n += 1 + l + sovGatewayPlugin(uint64(l))
		}
	}
	if len(m.Plugins) > 0 {
		for _, e := range m.Plugins {
			l = e.Size()
			n += 1 + l + sovGatewayPlugin(uint64(l))
		}
	}
	if len(m.Gateway) > 0 {
		for _, s := range m.Gateway {
			l = len(s)
			n += 1 + l + sovGatewayPlugin(uint64(l))
		}
	}
	if len(m.User) > 0 {
		for _, s := range m.User {
			l = len(s)
			n += 1 + l + sovGatewayPlugin(uint64(l))
		}
	}
	if m.IsGroupSetting {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Plugins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGatewayPlugin(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovGatewayPlugin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGatewayPlugin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGatewayPlugin(x uint64) (n int) {
	return sovGatewayPlugin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GatewayPlugin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayPlugin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayPlugin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = append(m.Route, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = append(m.Host, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = append(m.Service, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plugins = append(m.Plugins, &Plugins{})
			if err := m.Plugins[len(m.Plugins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = append(m.Gateway, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = append(m.User, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGroupSetting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGroupSetting = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plugins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: plugins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: plugins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &types.Struct{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGatewayPlugin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGatewayPlugin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGatewayPlugin
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGatewayPlugin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGatewayPlugin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGatewayPlugin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGatewayPlugin
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGatewayPlugin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGatewayPlugin   = fmt.Errorf("proto: integer overflow")
)
